/*
 * main.c
 *
 *  Created on: 2023年4月22日
 *      Author: bcl
 */

#include <stdio.h>
#include "xparameters.h"
#include "xgpiops.h"
#include "xgpio.h"
#include "xscugic.h"
#include "xstatus.h"
#include "xplatform_info.h"
#include <xil_printf.h>
#include "sleep.h"

//设备ID
#define GPIO_DEVICE_ID  	XPAR_XGPIOPS_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define AXI_GPIO_DEVICE_ID  XPAR_GPIO_0_DEVICE_ID

//AXIGPIO中断ID #61
#define AXI_GPIO_INTERRUPT_ID	XPAR_FABRIC_AXI_GPIO_0_IP2INTC_IRPT_INTR

//核心板PS的LED
#define GPIO_MIO_LED		8

//AXI GPIO通道1
#define GPIO_CHANNEL1		1

int SetupInterruptSystem(XScuGic *GicInstancePtr, XGpio *AXI_Gpio, u16 AXI_GpioIntrId);
void IntrHandler(void *CallBackRef);

XGpioPs Gpio; //GPIO实例
XGpioPs_Config *ConfigPtr;

XScuGic Intc; //中断控制器实例
XScuGic_Config *IntcConfig;

XGpio 	AXI_Gpio; //AXI GPIO实例

u8 flag;
u8 LED_value;
static u8 i = 1;

int main()
{
	printf("AXI GPIO INTERRUPT TEST\r\n");

	//初始化PS端的GPIO
	ConfigPtr = XGpioPs_LookupConfig(GPIO_DEVICE_ID);
	XGpioPs_CfgInitialize(&Gpio, ConfigPtr,
					ConfigPtr->BaseAddr);

	//初始化PL端的AXI GPIO
	XGpio_Initialize(&AXI_Gpio, AXI_GPIO_DEVICE_ID);

	//把PS端的GPIO设置为输出模式，并使能
	XGpioPs_SetDirectionPin(&Gpio,GPIO_MIO_LED,1);
	XGpioPs_SetOutputEnablePin(&Gpio,GPIO_MIO_LED,1);

	//把PL端的AXI GPIO设置为输入模式
	XGpio_SetDataDirection(&AXI_Gpio, GPIO_CHANNEL1, 0x00000001);

	//配置中断
	SetupInterruptSystem(&Intc, &AXI_Gpio, AXI_GPIO_INTERRUPT_ID);

	while(1)
	{
		if(flag)
		{
			//按键消抖
			usleep(200000);

			//LED状态取反
			LED_value = ~ LED_value;

			//为LED写入值
			XGpioPs_WritePin(&Gpio,GPIO_MIO_LED,LED_value);

			//清除中断状态
			XGpio_InterruptClear(&AXI_Gpio, 0x00000001);     //清除按键KEY中断

			//使能AXI GPIO引脚中断
			XGpio_InterruptEnable(AXI_Gpio, 0x00000001);

			flag = 0;
		}
	}

	return 0;
}

int SetupInterruptSystem(XScuGic *GicInstancePtr, XGpio *AXI_Gpio,
				u16 AXI_GpioIntrId)
{
	int Status;

	//查找GIC器件配置信息，并进行初始化
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}
	Status = XScuGic_CfgInitialize(GicInstancePtr, IntcConfig,
					IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	//初始化ARM处理器异常句柄
	Xil_ExceptionInit();
	//给IRQ异常注册处理程序
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
				(Xil_ExceptionHandler)XScuGic_InterruptHandler,
				GicInstancePtr);
	//使能处理器的中断
	Xil_ExceptionEnableMask(XIL_EXCEPTION_IRQ);

	//关联中断处理函数
	Status = XScuGic_Connect(GicInstancePtr, AXI_GpioIntrId,
				(Xil_ExceptionHandler)IntrHandler,
				(void *)AXI_Gpio);
	if (Status != XST_SUCCESS) {
		return Status;
	}
	//为AXI GPIO器件使能中断
	XScuGic_Enable(GicInstancePtr, AXI_GpioIntrId);

	//中断类型为高有效电平敏感类型
	XScuGic_SetPriorityTriggerType(GicInstancePtr, AXI_GpioIntrId, 0xA0, 0x1);

	//AXI GPIO的中断使能
	XGpio_InterruptGlobalEnable(AXI_Gpio);		  //打开全局中断
	XGpio_InterruptEnable(AXI_Gpio, 0x00000001); //打开通道对应的中断

	return XST_SUCCESS;
}

void IntrHandler(void *CallBackRef)
{
	XGpio *AXI_Gpio = (XGpio *)CallBackRef;

	//读取AXI GPIO的中断状态
	if (XGpio_InterruptGetStatus(AXI_Gpio))
	{
		printf("interrupt %d!\r\n", i++ );

		//标志位置1
		flag = 1;

		//关闭AXI GPIO的中断
		XGpio_InterruptDisable(AXI_Gpio, 0x00000001); //打开通道对应的中断
	}
}

